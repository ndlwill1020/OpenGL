深度:就是在openGL坐标系中，像素点Z坐标距离摄像机的距离。
摄像机可能放在坐标系的任何位置，那么，就不能简单的说Z数值越大或越小，就是越靠近摄像机
openGL 会专门用一个缓冲区来存放这个Z坐标数值   就叫深度缓冲区

深度缓冲区的作用:
一般情况下，我们绘制图片，后绘制的会覆盖前面的。所以，一般我们绘制顺序是先后面再前面。
这就会有一个性能问题，就是遮盖的部分，先绘制的被覆盖是没有意义的运算操作。
深度缓冲区就是来解决这个问题的。
有了深度缓冲区，绘制的时候就会检查Z坐标的数值，靠近摄像机的覆盖远离的，而不是依靠绘制顺序。

使用缓冲区测试:
是因为开启后，测试深度值再绘制。
glEnable(GL_DEPTH_TEST);  

如果摄影机，在Z轴的正方向，那么Z值大靠近摄影机。
如果摄影机，在Z轴的负方向，那么Z值小靠近摄影机。

我们希望靠近摄影机的数值覆盖远的。所以，深度测试覆盖规则需要能够修改。
glDepthFunc(func); 

参数func的值可以为GL_NEVER（没有处理）
GL_ALWAYS（处理所有）
GL_LESS（小于）
GL_LEQUAL（小于等于）
GL_EQUAL（等于）
GL_GEQUAL（大于等于）
GL_GREATER（大于）
GL_NOTEQUAL（不等于）
其中默认值是GL_LESS

图片有透明度的时候。因为深度测试只会单纯的覆盖保留不能混色。
这样，在绘制半透明物体后，缓冲区存放了一些半透明物体的数据。那么半透明后面的物体将会不能出现。

这时候，我们可以使用函数 glDepthMask(GL_FALSE) 把深度缓冲区置为只读形式。
这样半透明物体的数值就不能进入缓冲区了。后面绘制的物体只要比原缓冲区数值更靠近摄像机就行了。

所以，最后的绘制顺序是，先绘制所有的不透明物体，以后禁用缓冲区写入，绘制所有半透明的。